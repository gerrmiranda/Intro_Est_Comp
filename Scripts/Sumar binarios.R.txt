# Repasemos operadores arimeticos en R

?Arithmetic

# Implementemos una función que sume binarios!!!

binary_sum <- function(bin1, bin2) {
  
  max_len <- max(nchar(bin1), nchar(bin2))
  bin1 <- sprintf("%0*s", max_len, bin1)
  bin2 <- sprintf("%0*s", max_len, bin2)
  
  carry <- 0
  result <- ""
  
  for (i in max_len:1) {
    bit1 <- as.integer(substr(bin1, i, i))
    bit2 <- as.integer(substr(bin2, i, i))
    
    sum_bits <- sum(bit1, bit2, carry,na.rm = TRUE)
    result <- paste(sum_bits %% 2, result, sep = "")
    carry <- sum_bits %/% 2
  }

  if (carry > 0) {
    result <- paste0(carry, result)
  }
  
  return(result)
}

binary_sum("10","1")

# Ahora una función que sume binarios con parte fraccionaria!

binary_fractional_sum <- function(bin1, bin2) {
  
  int_part_bin1 <- substr(bin1, 1, regexpr("\\.", bin1) - 1)
  frac_part_bin1 <- substr(bin1, regexpr("\\.", bin1) + 1, nchar(bin1))
  
  int_part_bin2 <- substr(bin2, 1, regexpr("\\.", bin2) - 1)
  frac_part_bin2 <- substr(bin2, regexpr("\\.", bin2) + 1, nchar(bin2))
  
  # Se determina el máximo de longitud y se rellena con ceros
  int_max_len <- max(nchar(int_part_bin1), nchar(int_part_bin2))
  frac_max_len <- max(nchar(frac_part_bin1), nchar(frac_part_bin2))
  
  int_part_bin1 <- sprintf("%0*s", int_max_len, int_part_bin1)
  int_part_bin2 <- sprintf("%0*s", int_max_len, int_part_bin2)
  frac_part_bin1 <- trimws(sprintf("%-*s", frac_max_len, frac_part_bin1))
  frac_part_bin2 <- trimws(sprintf("%-*s", frac_max_len, frac_part_bin2))
  
  # Suma parte entera
  int_sum <- binary_sum(int_part_bin1, int_part_bin2)
  
  # Parte fraccionaria
  frac_sum <- binary_sum(frac_part_bin1, frac_part_bin2)
  
  # Resto
  if (nchar(frac_sum) > frac_max_len) {
    int_sum <- binary_sum(int_sum, "1")
    frac_sum <- substr(frac_sum, 2, nchar(frac_sum))
  }
  
  # Combina parte entera y fraccionaria
  result <- int_sum
  if (frac_max_len > 0) {
    result <- paste(result, ".", frac_sum, sep = "")
  }
  
  return(result)
}


bin1 <- "1011.1101"
bin2 <- "1101.0110"
sum_result <- binary_fractional_sum(bin1, bin2)
cat("Sum:", sum_result)



sx <- function(c,r,x) {
  (c * r ** (0:x))
}


# Función que pase de decimal a binario

decimal_to_binary <- function(decimal) {
  integer_part <- floor(decimal)
  decimal_part <- decimal - integer_part
  
  integer_binary <- as.character(as.integer(integer_part, base = 2))
  
  decimal_binary <- character(0)
  while (decimal_part >= 0 && length(decimal_binary) < 60) {
    decimal_part = decimal_part * 2
    if (decimal_part >= 1) {
      decimal_binary <- c(decimal_binary, "1")
      decimal_part = decimal_part - 1
    } else {
      decimal_binary <- c(decimal_binary, "0")
    }
  }
  
  result <- integer_binary
  
  if (length(decimal_binary) > 0) {
    result <- paste0(result, ".", paste(decimal_binary, collapse = ""))
  }
  
  return(result)
}

# Sx en numeros binarios. ¿Qué necesitamos?

sxbinary <- function(c,r,x) {
  
  sx_v = sx(c,r,x)
  
  sapply(sx_v, decimal_to_binary)
}

# ¿Cómo obtenemos la suma?

Reduce(
  binary_fractional_sum,
  sxbinary(3/16,1/16,14)
)


